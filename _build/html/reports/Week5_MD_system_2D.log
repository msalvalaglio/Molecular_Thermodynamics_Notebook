Traceback (most recent call last):
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Applications/anaconda3/envs/plumed-masterclass-2022/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
## Useful functions
verlet=lambda r, r_past, force, mass, dt:  2*r-r_past+(dt**2)*force/mass
forcebox=lambda x, boxx,boxk: np.greater(np.abs(x),boxx)*(-boxk)*x


#Define the system's box
boxx=10 #x dimension of the simulation' box
boxy=10 #y dimension of the simulation' box
boxk=1  #k constant for harmonic repulsive force

#Number of particles
N=8

#mass of the particles
m=np.ones(N)

# Topology
M=np.array([[0, 1, 0, 0, 0, 0, 0, 1],
           [1, 0, 1, 0, 0, 0, 0, 0],
           [0, 1, 0, 1, 0, 0, 0, 0],
           [0, 0, 1, 0, 1, 0, 0, 0],
           [0, 0, 0, 1, 0, 1, 0, 0],
           [0, 0, 0, 0, 1, 0, 1, 0],
           [0, 0, 0, 0, 0, 1, 0, 1],
           [1, 0, 0, 0, 0, 0, 1, 0]]); 

M_gas_diatomic=np.array([[0, 1, 0, 0, 0, 0, 0, 0],
           [1, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 1, 0, 0, 0, 0],
           [0, 0, 1, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 1, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 1],
           [0, 0, 0, 0, 0, 0, 1, 0]]); 




######## "Force Field" Parameters #######
HS=1; # Repulsive soft potential 
k=25.0; # Harmonic oscillator constant
req=1; # Harmonic oscillator equilibrium distance
KAPPA=k*M_gas_diatomic
epsilon=0;


##Use this function to implement different potentials
def forceij(xi,xj,yi,yj,HS,KAPPA,req,epsilon): 
        r=np.sqrt((xi-xj)**2+(yi-yj)**2); #Distance      
                
        #Ideal Gas
        dVdr=0 
        #Repulsive Wall 
        # dVdr=-12*HS/(np.power(r,13))
        #Repulsive Wall + Harmonic potential
        #... ... ...
        #Lennard Jones Potential
        #... .... .... ... ....         
        cx=-dVdr*((xi-xj))/r;  #Pairwise component of the force in x
        cy=-dVdr*((yi-yj))/r;  #Pairwise component of the force in y
             
        return [cx,cy]


def print_progress(iteration, total, bar_length=50):
    progress = (iteration / total)
    arrow = '*' * int(round(bar_length * progress))
    spaces = ' ' * (bar_length - len(arrow))
    print(f'\r|{arrow}{spaces}| {int(progress * 100)}% | ', end='', flush=True)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 15>[0;34m()[0m
[1;32m     12[0m N[38;5;241m=[39m[38;5;241m8[39m
[1;32m     14[0m [38;5;66;03m#mass of the particles[39;00m
[0;32m---> 15[0m m[38;5;241m=[39m[43mnp[49m[38;5;241m.[39mones(N)
[1;32m     17[0m [38;5;66;03m# Topology[39;00m
[1;32m     18[0m M[38;5;241m=[39mnp[38;5;241m.[39marray([[[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m1[39m],
[1;32m     19[0m            [[38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m],
[1;32m     20[0m            [[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m],
[0;32m   (...)[0m
[1;32m     24[0m            [[38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m1[39m],
[1;32m     25[0m            [[38;5;241m1[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m0[39m]]); 

[0;31mNameError[0m: name 'np' is not defined
NameError: name 'np' is not defined

